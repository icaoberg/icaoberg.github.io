<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming | icaoberg AT github DOT io</title>
    <link>http://icaoberg.github.io/category/programming/</link>
      <atom:link href="http://icaoberg.github.io/category/programming/index.xml" rel="self" type="application/rss+xml" />
    <description>programming</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Copyright Â© 2006-2022 icaoberg AT github DOT io</copyright><lastBuildDate>Mon, 29 Nov 2021 01:55:24 +0000</lastBuildDate>
    <image>
      <url>http://icaoberg.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>programming</title>
      <link>http://icaoberg.github.io/category/programming/</link>
    </image>
    
    <item>
      <title>taskwarrior</title>
      <link>http://icaoberg.github.io/post/20211129-taskwarrior/</link>
      <pubDate>Mon, 29 Nov 2021 01:55:24 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/20211129-taskwarrior/</guid>
      <description>&lt;p&gt;I finally created a simple script as a side project that creates a daily TODO from &lt;a href=&#34;https://taskwarrior.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TaskWarrior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The benefits of my script are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am syncing my data on the cloud (not using a TaskWarrior server)&lt;/li&gt;
&lt;li&gt;I am backing up my daily todo&lt;/li&gt;
&lt;li&gt;I am getting a daily email with the most job-related tasks for the day&lt;/li&gt;
&lt;li&gt;I am getting a printed TODO list at home every morning&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This script sounds trivial but I liked writing it. It is useful.&lt;/p&gt;
&lt;p&gt;As a side project to this side project is I want to be able to do the same but print to a thermal printer instead of the laser printer.&lt;/p&gt;
&lt;p&gt;It is dumb and silly, but I like these kind of projects that may make my life easier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>http://icaoberg.github.io/slides/containerization/</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/slides/containerization/</guid>
      <description>&lt;h1 id=&#34;containerization-virtualization-and-more&#34;&gt;Containerization, virtualization and more&lt;/h1&gt;
&lt;h2 id=&#34;fall-2021&#34;&gt;icaoberg AT psc DOT edu
Pittsburgh Supercomputing Center
Carnegie Mellon University
Fall 2021&lt;/h2&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;span class=&#34;fragment &#34; &gt;
   One 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   **Two** 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three 
&lt;/span&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Singularity containers with Docker</title>
      <link>http://icaoberg.github.io/post/20210902-building-singularity-containers/</link>
      <pubDate>Thu, 02 Sep 2021 13:09:56 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/20210902-building-singularity-containers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pretty.yml</title>
      <link>http://icaoberg.github.io/post/20210828-pretty-yml/</link>
      <pubDate>Sat, 28 Aug 2021 23:01:23 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/20210828-pretty-yml/</guid>
      <description>&lt;p&gt;During the summer I worked with an intern on migrating our repos from the private GitLab instance and my personal GitHub space to the PSC organization GitHub account. The idea was to publicly share our Dockerfiles and Singularity definition files for security and for those members in the community who might find them useful.&lt;/p&gt;
&lt;p&gt;We were successful -at least based on my expectations- at doing so. We spent a considerable amount of time finding patterns, no matter how small, that would help us save time and tentatively automate process.&lt;/p&gt;
&lt;p&gt;Some of these patterns were dumped into &lt;code&gt;pretty.yml&lt;/code&gt;. This YAML is nothing but a workflow for &lt;a href=&#34;https://github.com/features/actions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Actions&lt;/a&gt; that monitors the existence of very specific files in the repo. If this files are found then we would label the repo as ready for publishing.&lt;/p&gt;
&lt;p&gt;A working example of this workflow can be found &lt;a href=&#34;https://github.com/pscedu/singularity-tiger/actions/workflows/pretty.yml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/3orieWEkUA8HIfRULS&#34; width=&#34;480&#34; height=&#34;366&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;https://giphy.com/gifs/season-3-the-simpsons-3x11-3orieWEkUA8HIfRULS&#34;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I honestly don&amp;rsquo;t know if this is considered a best practice in general, but it seems like so to me since we ended up saving so much time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>More random ellipsoids</title>
      <link>http://icaoberg.github.io/post/20210807-random-ellipsoids-2/</link>
      <pubDate>Sat, 07 Aug 2021 20:45:14 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/20210807-random-ellipsoids-2/</guid>
      <description>&lt;p&gt;I thought about this during. Most of the ellipsoids I generate get synthesized outside of the image. Hence I have many blank images like this one&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;Montage&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-can-i-do&#34;&gt;What can I do?&lt;/h2&gt;
&lt;p&gt;Not much. I clearly reached the moment where I need to sample and compute these stats using something like Python (or other) and then call ImageMagick from it. See convoluted script below&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -x
for I in {1..100}
do
	X0=$((448 + $RANDOM % 576))
	Y0=$((448 + $RANDOM % 576))
	let &amp;quot;X_CIRCLE_EDGE=$X0+15&amp;quot;
	let &amp;quot;Y_CIRCLE_EDGE=$Y0+15&amp;quot;
	ANGLE=$((-45 + $RANDOM % 45))
	MIN_RADIUS=$((5 + $RANDOM % 50))
	X_ELLIPSOID_EDGE=$(($MIN_RADIUS + $RANDOM % 75 ))
	MIN_RADIUS=$((5 + $RANDOM % 75))
	Y_ELLIPSOID_EDGE=$(($MIN_RADIUS + $RANDOM % 75))
	FLIP_A_COIN=$(($(($RANDOM%10))%2))

	if [ $FLIP_A_COIN -eq 1 ];then
		convert -size 1024x1024 xc:black  \
        		    -draw &amp;quot;fill white rotate $ANGLE ellipse $X0,$Y0 $X_ELLIPSOID_EDGE,$Y_ELLIPSOID_EDGE 0,360 &amp;quot; \
					-draw &amp;quot;fill black rotate $ANGLE circle $X0,$Y0 $X_CIRCLE_EDGE,$Y_CIRCLE_EDGE&amp;quot; cell$I.png
	else
		convert -size 1024x1024 xc:black  \
        		    -draw &amp;quot;fill white rotate $ANGLE ellipse $X0,$Y0 $Y_ELLIPSOID_EDGE,$X_ELLIPSOID_EDGE 0,360 &amp;quot; \
					-draw &amp;quot;fill white rotate $ANGLE circle $X0,$Y0 $X_CIRCLE_EDGE,$Y_CIRCLE_EDGE&amp;quot; cell$I.png
	fi
done

montage -density 300 -tile 10x10 -geometry +5+5 -border 2 cell*.png montage10x10-translation-and-rotation6.png
convert montage10x10-translation-and-rotation6.png -scale 50% montage10x10-translation-and-rotation6.png
rm -f cell*png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the pretty image it produces&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;montage10x10-translation-and-rotation6.png&#34; alt=&#34;Montage&#34;&gt;&lt;/p&gt;
&lt;p&gt;$$ But why?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media2.giphy.com/media/vLhYqCSE2YVXi/giphy.gif?cid=ecf05e47jykq81dvo0gtb1ux2ow826objcsa6o7hyp5fhgfo&amp;amp;rid=giphy.gif&amp;amp;ct=g&#34; alt=&#34;Gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;Honestly, at this point, it seems like to challenge to work this out on ImageMagick. I know&amp;hellip; a dumb challenge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random ellipsoids</title>
      <link>http://icaoberg.github.io/post/20210807-random-ellipsoids/</link>
      <pubDate>Sat, 07 Aug 2021 15:07:28 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/20210807-random-ellipsoids/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I made another. &lt;a href=&#34;https://t.co/DZ9dP7UblL&#34;&gt;pic.twitter.com/DZ9dP7UblL&lt;/a&gt;&lt;/p&gt;&amp;mdash; IvÃ¡n (@justahappygeek) &lt;a href=&#34;https://twitter.com/justahappygeek/status/1424113267878858761?ref_src=twsrc%5Etfw&#34;&gt;August 7, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;random-ellipsoids&#34;&gt;Random ellipsoids&lt;/h1&gt;
&lt;p&gt;Yesterday I wrote a random post (see what I did there) about generating random circles using ImageMagick. Today I was thinking, what about random ellipsoids?&lt;/p&gt;
&lt;p&gt;This should be easy to implement, I think.&lt;/p&gt;
&lt;p&gt;Using the script I wrote yesterday,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -x
for I in {1..100}
do
	X=$((1 + $RANDOM % 500))
	Y=$((1 + $RANDOM % 500))
    RADIUS=$((1 + $RANDOM % 100))

	convert -size 500x500 xc:black  \
        	    -draw &amp;quot;fill white translate $X,$Y circle 0,0,0,$RADIUS&amp;quot; circles$I.png
done

montage -density 300 -tile 10x10 -geometry +5+5 -border 2 *.png montage10x10.jpg
rm -f circles*png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can make some edits so that it generates ellipsoids and translates them randomly on the screen.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -x
for I in {1..100}
do
	X=$((1 + $RANDOM % 500))
	Y=$((1 + $RANDOM % 500))
        RADIUS=$((1 + $RANDOM % 100))

	convert -size 500x500 xc:black  \
        	    -draw &amp;quot;fill white translate $X,$Y ellipse 50,30 40,20 0,360&amp;quot; ellipsoid$I.png
done

montage -density 300 -tile 10x10 -geometry +5+5 -border 2 ellip*.png montage10x10.jpg
rm -f ellip*png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;montage10x10-translation.jpg&#34; alt=&#34;Montage&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash ./ellipsoid.sh  12.89s user 3.28s system 169% cpu 9.554 total
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;we-can-rebuild-it-we-have-the-technology&#34;&gt;We can rebuild it&amp;hellip; we have the technology&lt;/h2&gt;
&lt;p&gt;Introducing translation is fine, but without rotation, the ellipsoids look dull. Adding rotation&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -x
for I in {1..100}
do
	X=$((1 + $RANDOM % 500))
	Y=$((1 + $RANDOM % 500))
        ANGLE=$((1 + $RANDOM % 360))
        RADIUS=$((1 + $RANDOM % 100))

	convert -size 500x500 xc:black  \
        	    -draw &amp;quot;fill white translate $X,$Y rotate $ANGLE ellipse 50,30 40,20 0,360&amp;quot; ellipsoid$I.png
done

montage -density 300 -tile 10x10 -geometry +5+5 -border 2 ellip*.png montage10x10-translation-and-rotation.jpg
rm -f ellip*png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;makes it look better.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;montage10x10-translation-and-rotation.jpg&#34; alt=&#34;Montage&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, if these are meant to be synthetic primitive cells, then shape is important as well.&lt;/p&gt;
&lt;h2 id=&#34;make-it-so&#34;&gt;Make it so&lt;/h2&gt;
&lt;p&gt;Adding rotation is cool, but what about shape? I guess we can play around the parameters.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -x
for I in {1..100}
do
	X=$((256 + $RANDOM % 100))
	Y=$((256 + $RANDOM % 100))
        ANGLE=$((1 + $RANDOM % 360))
        X_RADIUS=$((50 + $RANDOM % 500))
        Y_RADIUS=$((50 + $RANDOM % 500))

	convert -size 1024x1024 xc:black  \
        	    -draw &amp;quot;fill white rotate $ANGLE ellipse $X,$Y $X_RADIUS,$Y_RADIUS 0,360&amp;quot; ellipsoid$I.png
done

montage -density 300 -tile 10x10 -geometry +5+5 -border 2 ellip*.png montage10x10-translation-and-rotation.png
convert montage10x10-translation-and-rotation.png -scale 50% montage10x10-translation-and-rotation.png
rm -f ellip*png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;montage10x10-translation-and-rotation2.png&#34; alt=&#34;Montage&#34;&gt;&lt;/p&gt;
&lt;p&gt;It is more than obvious this synthetic montage will not fool any cell biologist. Looks better than the first picture from yesterday&amp;rsquo;s post though.&lt;/p&gt;
&lt;p&gt;Keep in mind &lt;code&gt;$RANDOM&lt;/code&gt; is always sampling from a uniform distribution, so we can&amp;rsquo;t make prettier pics. An alternative is to find a package to generate random numbers from other distributions or to do this in Python. Either way, I don&amp;rsquo;t think I can make it look prettier than it is at the moment.&lt;/p&gt;
&lt;h2 id=&#34;but-why&#34;&gt;But why?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://media0.giphy.com/media/3o6YfYvk4uB415sOTm/giphy.gif?cid=ecf05e47ilvubfvgwo7ivtnyu3m1bahyxkucc6skrl4bjov0&amp;amp;rid=giphy.gif&amp;amp;ct=g&#34; alt=&#34;Bored&#34;&gt;
Again I was bored. And was curious to what extent I could use ImageMagick.&lt;/p&gt;
&lt;p&gt;These scripts are not optimized nor I claim they are. Just in case.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random circles</title>
      <link>http://icaoberg.github.io/post/20210806-random-circles/</link>
      <pubDate>Fri, 06 Aug 2021 21:34:41 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/20210806-random-circles/</guid>
      <description>&lt;h1 id=&#34;basic-script&#34;&gt;Basic script&lt;/h1&gt;
&lt;p&gt;I was cleaning my hard drive and I found this script I wrote a long time ago. It uses ImageMagick to draw a circle.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

convert -size 500x500 xc:black  \
        -draw &amp;quot;fill white circle 0,50,0,32  &amp;quot; circles.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At some point I remember I was trying to draw random circles in squares images to test CellOrganizer. I wondered if there was a way to make this dumb script better.&lt;/p&gt;
&lt;h1 id=&#34;just-a-little-better&#34;&gt;Just a little better&lt;/h1&gt;
&lt;p&gt;By tweaking the script above a little we can change the location of the circle within the image. For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -x
X=$((1 + $RANDOM % 500))
Y=$((1 + $RANDOM % 500))

convert -size 500x500 xc:black  \
        	    -draw &amp;quot;fill white translate $X,$Y circle 0,0,0,100  &amp;quot; circles.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the script above generates a circle of radius 100 whose center is randomly generated.&lt;/p&gt;
&lt;p&gt;However, running the script above generates a single image.&lt;/p&gt;
&lt;h3 id=&#34;wait-there-is-more&#34;&gt;Wait.. there is more&lt;/h3&gt;
&lt;p&gt;With some tweaks to the script above we can generate more circles.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -x
for I in {1..25}
do
	X=$((1 + $RANDOM % 500))
	Y=$((1 + $RANDOM % 500))

	convert -size 500x500 xc:black  \
        	    -draw &amp;quot;fill white translate $X,$Y circle 0,0,0,100  &amp;quot; circles$I.png
done

montage -density 300 -tile 5x5 -geometry +5+5 -border 2 *.png montage.jpg
rm -f circles*.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The script above will generate the following montage&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;montage.jpg&#34; alt=&#34;Circles&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-about-the-radius&#34;&gt;What about the radius?&lt;/h2&gt;
&lt;p&gt;I guess you can use &lt;code&gt;$RANDOM&lt;/code&gt; to generate random radii. Notice the script below is very similar to the previous, now I am just sampling the random radii.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

set -x
for I in {1..100}
do
	X=$((1 + $RANDOM % 500))
	Y=$((1 + $RANDOM % 500))
    RADIUS=$((1 + $RANDOM % 100))

	convert -size 500x500 xc:black  \
        	    -draw &amp;quot;fill white translate $X,$Y circle 0,0,0,$RADIUS&amp;quot; circles$I.png
done

montage -density 300 -tile 10x10 -geometry +5+5 -border 2 *.png montage10x10.jpg
rm -f circles*png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The script above will generate the following montage montage&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;montage10x10.jpg&#34; alt=&#34;Circles&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;but-why&#34;&gt;But why?&lt;/h2&gt;
&lt;p&gt;Because I was bored. I was trying to remember why I built this, and I seemed to recall I built or explored this with Claire a long time ago.&lt;/p&gt;
&lt;p&gt;At that time we were trying to generate synthetic images that could be used to test CellOrganizer and this was part of our exploration. Mostly because ImageMagick has a small footprint and a small learning curve.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GeNT</title>
      <link>http://icaoberg.github.io/post/20210327-fortran/</link>
      <pubDate>Sat, 27 Mar 2021 22:39:22 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/20210327-fortran/</guid>
      <description>&lt;p&gt;I am building a container for GeNT, a bioformatics app written in Fortran.&lt;/p&gt;
&lt;div class=&#34;github-card&#34; data-github=&#34;icaoberg/singularity-gent&#34; data-width=&#34;400&#34; data-height=&#34;&#34; data-theme=&#34;default&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//cdn.jsdelivr.net/github-cards/latest/widget.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;I mean&amp;hellip; it works&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updating Singularity recipes</title>
      <link>http://icaoberg.github.io/post/20201228/</link>
      <pubDate>Mon, 28 Dec 2020 23:14:13 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/20201228/</guid>
      <description>&lt;p&gt;I am a huge fan of Singularity to deploy software on HPC clusters. But lately I have been playing around with Spack. Spack is amazing as well, but sometimes Singularity works better for legacy software or software that has the potential to become legacy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media0.giphy.com/media/tTc43DeTm2kkJTrI2G/giphy.gif?cid=ecf05e47ya2m2uk9eruqf1fma4ge5cxq7l7xna50tykcuqc6&amp;amp;rid=giphy.gif&#34; alt=&#34;Gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;However Spack has the potential to allow us to build and deploy nontraditional software on an HPC cluster. For example, I use many simple tools to generate reports. With Singularity I use&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/icaoberg/singularity-chalk-animation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chalk-animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/icaoberg/singularity-chalk-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chalk-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/icaoberg/singularity-lazygit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lazygit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/icaoberg/singularity-mc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However I found it easier to deploy the following in Spack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/boxen-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;boxen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/sparkly-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sparkly-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/carloscuesta/gitmoji-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gitmoji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/is-up-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;is-up-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mixn/carbon-now-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;carbon-now-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/is-online-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;is-online-cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or with the help of the above&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/glow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;glow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spack is really powerful as long as the compilers you require are already present (in case you do not have admin access to install or update software that lives outside of the Spack install).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GNU GCC</title>
      <link>http://icaoberg.github.io/post/singularity-gcc/</link>
      <pubDate>Fri, 03 Apr 2020 22:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/singularity-gcc/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The GNU Compiler Collection&lt;/a&gt; is a compiler system produced by the GNU Project supporting various programming languages. GCC is a key component of the GNU toolchain and the standard compiler for most projects related to GNU and Linux, including the Linux kernel.&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;p&gt;You can find the recipe to build the container &lt;a href=&#34;https://github.com/icaoberg/singularity-gcc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To facilitate building the container, you will find two &lt;strong&gt;simple&lt;/strong&gt; scripts in the repository&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rbuild.sh&lt;/code&gt;. Builds the image remotely and then pulls it down locally. You will need access to &lt;a href=&#34;https://cloud.sylabs.io/builder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SyLabs.io Remote Builder&lt;/a&gt; to do this. Getting access to the Remote Builder is beyond the scope of this post.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build.sh&lt;/code&gt;. Builds the image locally. You will need root privileges to build the container locally.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;building-the-image-locally&#34;&gt;Building the image locally&lt;/h3&gt;
&lt;p&gt;The script &lt;code&gt;build.sh&lt;/code&gt; looks like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

IMAGE=singularity-debian-dusty-gcc-v8.3.0.sif
DEFINITION=Singularity

if [ -f $IMAGE ]; then
	rm -fv $IMAGE
fi

sudo singularity build $IMAGE $DEFINITION
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To build the image locally simply run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash ./build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;building-the-image-remotely&#34;&gt;Building the image remotely&lt;/h3&gt;
&lt;p&gt;The script &lt;code&gt;rbuild.sh&lt;/code&gt; looks like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

IMAGE=singularity-debian-dusty-gcc-v8.3.0.sif
DEFINITION=Singularity

if [ -f $IMAGE ]; then
	rm -fv $IMAGE
fi

singularity build --remote $IMAGE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you notice, there isn&amp;rsquo;t much difference between this script and the previous script.&lt;/p&gt;
&lt;p&gt;To build the image remotely simply run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash ./rbuild.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example-1-building-samtools-from-source&#34;&gt;Example 1. Building samtools from source&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;THIS EXAMPLE ASSUMES SINGULARITY IS INSTALLED AND IS AVAILABLE TO YOUR USER&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Building &lt;a href=&#34;https://github.com/samtools/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;samtools&lt;/a&gt; from source code is a three step process.&lt;/p&gt;
&lt;p&gt;First, we need to download the source code for samtools. For version 1.10, type in termninal&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -nc https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2
bunzip2 samtools-1.10.tar.bz2 &amp;amp;&amp;amp; tar -xf samtools-1.10.tar &amp;amp;&amp;amp; rm -f samtools-1.10.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Second, you need to download the image I created from SyLabs (alternatively you can build the image yourself). To download the image type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;singularity pull --arch amd64 library://icaoberg/default/gcc:v8.3.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After running these commands, you should see these files/folders&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[gcc-example]$ ls -lt
total 149809
-rwxr-xr-x 1 icaoberg icaoberg 153572283 Apr  4 03:39 gcc_v8.3.0.sif
drwxrwxr-x 9 icaoberg icaoberg        80 Dec  6 11:46 samtools-1.10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Third, we need to shell into the Singularity image and then compile from source. To shell into the image, type in terminal&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;singularity shell gcc_v8.3.0.sif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we are inside the container, let&amp;rsquo;s change directory to samtools and compile the tool. Type in terminal,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd samtools-1.10
./configure
make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After running these commands, you should see the binary now&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Singularity&amp;gt; ls -lt samtools

-rwxr-xr-x 1 icaoberg icaoberg 6656944 Apr  4 04:21 samtools
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember, the you need to run the binary within the container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Singularity&amp;gt; ./samtools --help

Program: samtools (Tools for alignments in the SAM format)
Version: 1.10 (using htslib 1.10)

Usage:   samtools &amp;lt;command&amp;gt; [options]

Commands:
  -- Indexing
     dict           create a sequence dictionary file
     faidx          index/extract FASTA
     fqidx          index/extract FASTQ
     index          index alignment

  -- Editing
     calmd          recalculate MD/NM tags and &#39;=&#39; bases
     fixmate        fix mate information
     reheader       replace BAM header
     targetcut      cut fosmid regions (for fosmid pool only)
     addreplacerg   adds or replaces RG tags
     markdup        mark duplicates

  -- File operations
     collate        shuffle and group alignments by name
     cat            concatenate BAMs
     merge          merge sorted alignments
     mpileup        multi-way pileup
     sort           sort alignment file
     split          splits a file by read group
     quickcheck     quickly check if SAM/BAM/CRAM file appears intact
     fastq          converts a BAM to a FASTQ
     fasta          converts a BAM to a FASTA

  -- Statistics
     bedcov         read depth per BED region
     coverage       alignment depth and percent coverage
     depth          compute the depth
     flagstat       simple stats
     idxstats       BAM index stats
     phase          phase heterozygotes
     stats          generate stats (former bamcheck)

  -- Viewing
     flags          explain BAM flags
     tview          text alignment viewer
     view           SAM&amp;lt;-&amp;gt;BAM&amp;lt;-&amp;gt;CRAM conversion
     depad          convert padded BAM to unpadded BAM
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example-2-compiling-and-running-a-simple-app&#34;&gt;Example 2. Compiling and running a simple app&lt;/h2&gt;
&lt;p&gt;Consider this file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
int main()
{
   /* printf function displays the content that is
    * passed between the double quotes.
    */
   printf(&amp;quot;Hello World&amp;quot;);
   return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The exists in a file called &lt;code&gt;hello.c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To compile this file type in terminal,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;singularity run --app gcc singularity-debian-dusty-gcc-v8.3.0.sif hello.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will create the file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;â ls -lt a.out

-rwxr-xr-x 1 icaoberg icaoberg 16608 Apr  4 05:10 a.out
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./a.out

Hello World
``
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Statistical Methods with MATLAB</title>
      <link>http://icaoberg.github.io/post/matlab-stats/</link>
      <pubDate>Tue, 17 Mar 2020 22:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/matlab-stats/</guid>
      <description>&lt;p&gt;I have been taken advantage of the current situation to distract and educate myself. It is not easy given the current state of affairs, however, distractions are important for everybody&amp;rsquo;s sanity.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Linear Algebra with MATLAB</title>
      <link>http://icaoberg.github.io/post/matlab-linearalgebra/</link>
      <pubDate>Mon, 09 Mar 2020 17:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/matlab-linearalgebra/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Solving Ordinary Differential Equations with MATLAB</title>
      <link>http://icaoberg.github.io/post/matlab-ode/</link>
      <pubDate>Mon, 09 Mar 2020 10:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/matlab-ode/</guid>
      <description></description>
    </item>
    
    <item>
      <title>cowsay</title>
      <link>http://icaoberg.github.io/post/singularity-cowsay/</link>
      <pubDate>Wed, 26 Feb 2020 10:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/singularity-cowsay/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Does anyone use &lt;a href=&#34;https://twitter.com/SingularityApp?ref_src=twsrc%5Etfw&#34;&gt;@SingularityApp&lt;/a&gt; and modules to load pre-existing images into their workspace? Just curious if we are reinventing the wheel by doing so and there exists another solution &lt;a href=&#34;https://t.co/KL0GilswXA&#34;&gt;https://t.co/KL0GilswXA&lt;/a&gt;&lt;/p&gt;&amp;mdash; IvÃ¡n (@justahappygeek) &lt;a href=&#34;https://twitter.com/justahappygeek/status/1232811924204724224?ref_src=twsrc%5Etfw&#34;&gt;February 26, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Working with &lt;a href=&#34;http://modules.sourceforge.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;environment modules&lt;/a&gt; makes my life so much easier.&lt;/p&gt;
&lt;p&gt;For example, for &lt;code&gt;cowsay&lt;/code&gt;,I created a &lt;code&gt;modulefile&lt;/code&gt; that will load the Singularity container to the workspace along with a script that calls it. Making the process transparent to the user (very little changes to their scripts, may be their SLURM submission scripts).&lt;/p&gt;
&lt;p&gt;To make this work you need three things&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an executable script that calls singularity (avoid using &lt;a href=&#34;https://en.wikipedia.org/wiki/Alias_%28command%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;alias&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;the Singularity container file&lt;/li&gt;
&lt;li&gt;a modulefile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;modulefile&lt;/code&gt; file I created for &lt;code&gt;cowsay&lt;/code&gt; is the following&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#%Module
##
## cowsay modulefile
##
## modulefiles/
##

set ver 3.03

set msg &amp;quot;This module adds cowsay $ver to various paths\n&amp;quot;

proc ModulesHelp { } {
        puts stderr $msg
}

module-whatis &amp;quot;Use cowsay tools $ver&amp;quot;

prepend-path PATH /path/to/containers/cowsay/v3.03/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;modulefile&lt;/code&gt; itself is very straightforward, all it does is prepend a folder. Now the folder its prepending has two files&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Singularity image&lt;/li&gt;
&lt;li&gt;an executable script that calls the image&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my system, there exists a folder with the following files&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[icaoberg] $ ls -lt
total 68899
-rwxr-xr-x 1 root root 70799360 Feb 26 17:48 singularity-debian-buster-cowsay-v3.03.simg
-rwxr-xr-x 1 root root      366 Feb 26 17:48 cowsay
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The contents of &lt;code&gt;cowsay&lt;/code&gt; (the script I built, not the actual binary) are&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

IMAGE=singularity-debian-buster-cowsay-v3.03.simg

function is_compute_node(){
if [ -x &amp;quot;$(command -v singularity)&amp;quot; ]; then
	return 0
else
	return 1
fi
}

if is_compute_node; then
	singularity run --app cowsay $(pwd)/$IMAGE &amp;quot;$1&amp;quot;
else
	echo &amp;quot;Singularity apps cannot run in the head node. Please request an allocation or call Singularity within a job.&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, the function&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function is_compute_node(){
if [ -x &amp;quot;$(command -v singularity)&amp;quot; ]; then
        return 0
else
        return 1
fi
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is neccesary because the &lt;code&gt;singularity&lt;/code&gt; binary is not accesible from the head node of our HPC cluster. Users must request an allocation to a compute node in order to run apps in Singularity containers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;Say I have the script &lt;code&gt;example.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
#
#$ -j y
#$ -S /bin/bash
#$ -cwd

echo &amp;quot;TOTAL SUCCESS&amp;quot; | cowsay
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the changes above, it will now become&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
#
#$ -j y
#$ -S /bin/bash
#$ -cwd

module load singularity/cowsay-3.03
echo &amp;quot;TOTAL SUCCESS&amp;quot; | cowsay
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Submitting the script above using SLURM&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sbatch -p public --mem=1Gb example.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should lead to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______________
&amp;lt; TOTAL SUCCESS &amp;gt;
 ---------------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;p&gt;I hope you found this post useful.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/icaoberg/singularity-cowsay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub source code repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.sylabs.io/library/icaoberg/default/cowsay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SyLabs.io Cloud image repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>bedtools</title>
      <link>http://icaoberg.github.io/post/singularity-bedtools-update/</link>
      <pubDate>Mon, 03 Feb 2020 18:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/singularity-bedtools-update/</guid>
      <description>&lt;h2 id=&#34;about-bedtools&#34;&gt;About bedtools&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;logo.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt;
&lt;p&gt;Collectively, the &lt;a href=&#34;https://bedtools.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bedtools&lt;/a&gt; utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks. The most widely-used tools enable genome arithmetic: that is, set theory on the genome. For example, bedtools allows one to intersect, merge, count, complement, and shuffle genomic intervals from multiple files in widely-used genomic file formats such as BAM, BED, GFF/GTF, VCF. While each individual tool is designed to do a relatively simple task (e.g., intersect two interval files), quite sophisticated analyses can be conducted by combining multiple bedtools operations on the UNIX command line.&lt;/p&gt;
&lt;h2 id=&#34;okay-hear-me-out&#34;&gt;Okay&amp;hellip; hear me out&lt;/h2&gt;
&lt;p&gt;Ok, so I added two simple examples to the repo to make sure users can test the Singularity image. However I need to either learn how to use the test section of the recipe of find a useful way to run tests. Kind of challenging if I want to keep it simple.&lt;/p&gt;
&lt;h3 id=&#34;example02sh&#34;&gt;example02.sh&lt;/h3&gt;
&lt;p&gt;The shell script below is pretty simple&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# icaoberg - this example is fork that uses a bedtools in a Singularity container
CONTAINER=../../singularity-bedtools.simg

echo &amp;quot;chr1	10	50	10&amp;quot; &amp;gt; a.bed
echo &amp;quot;chr1	20	40	20&amp;quot; &amp;gt; b.bed
echo &amp;quot;chr1	30	33	30&amp;quot; &amp;gt; c.bed

# Find the sub-intervals shared and unique to each file.
if [ -f $CONTAINER ]; then
	singularity run --app bedtools $CONTAINER multiinter -i a.bed b.bed c.bed | column -t
fi

# Intersect the sub-intervals with the original intervals to collect the scores
if [ -f $CONTAINER ]; then
	singularity run --app bedtools $CONTAINER multiinter -i a.bed b.bed c.bed \
    | singularity run --app bedtools $CONTAINER intersect -a - -b a.bed b.bed c.bed -wa -wb \
    | column -t
fi

# Grooupby the sub-intervals with the mean score from each of the original files.
if [ -f $CONTAINER ]; then
        singularity run --app bedtools $CONTAINER multiinter -i a.bed b.bed c.bed \
    | singularity run --app bedtools $CONTAINER intersect -a - -b a.bed b.bed c.bed -wa -wb \
    | singularity run --app bedtools $CONTAINER groupby -g 1-5 -c 13 -o mean \
    | column -t
fi

rm -f *.bed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The real question is, will this scale?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bedtools</title>
      <link>http://icaoberg.github.io/post/singularity-bedtools/</link>
      <pubDate>Sun, 26 Jan 2020 18:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/singularity-bedtools/</guid>
      <description>&lt;h2 id=&#34;about-bedtools&#34;&gt;About bedtools&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;logo.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt;
&lt;p&gt;Collectively, the &lt;a href=&#34;https://bedtools.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bedtools&lt;/a&gt; utilities are a swiss-army knife of tools for a wide-range of genomics analysis tasks. The most widely-used tools enable genome arithmetic: that is, set theory on the genome. For example, bedtools allows one to intersect, merge, count, complement, and shuffle genomic intervals from multiple files in widely-used genomic file formats such as BAM, BED, GFF/GTF, VCF. While each individual tool is designed to do a relatively simple task (e.g., intersect two interval files), quite sophisticated analyses can be conducted by combining multiple bedtools operations on the UNIX command line.&lt;/p&gt;
&lt;h2 id=&#34;downloading-the-image-from-sylabsio&#34;&gt;Downloading the image from SyLabs.io&lt;/h2&gt;
&lt;p&gt;For simplicity, I have placed a copy of the container in &lt;a href=&#34;https://cloud.sylabs.io/library/_container/5e2fb360bb587a8c79c3e875&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SyLabs.io&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; singularity search bedtools

No users found for &#39;bedtools&#39;

No collections found for &#39;bedtools&#39;

Found 1 containers for &#39;bedtools&#39;
	library://icaoberg/default/bedtools
		Tags: v2.29.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To download this image locally simply run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;singularity pull library://icaoberg/default/bedtools:v2.29.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-the-singularity-image&#34;&gt;Using the Singularity image&lt;/h3&gt;
&lt;h4 id=&#34;example-create-a-master-chromhmm-track-from-the-9-distinct-cell-types&#34;&gt;Example. Create a master ChromHMM track from the 9 distinct cell types.&lt;/h4&gt;
&lt;p&gt;You can find the script &lt;code&gt;example01&lt;/code&gt; &lt;a href=&#34;https://gist.github.com/icaoberg/2253e0ef34b3fd7dd3f4703d8037e83f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. It is based on existing examples, the script is simply calling bedtools in the Singularity container.&lt;/p&gt;
&lt;p&gt;Standard output is not neccesarily useful, however you should see something like this.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/296318&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/296318.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;I am nothing but a humble programmer creating the container for this wonderful app. &lt;a href=&#34;https://bedtools.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bedtools&lt;/a&gt; is developed in the &lt;a href=&#34;http://quinlanlab.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quinlan laboratory&lt;/a&gt; at the &lt;a href=&#34;https://www.utah.edu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;University of Utah&lt;/a&gt; and benefits from fantastic contributions made by scientists worldwide.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gifgen</title>
      <link>http://icaoberg.github.io/post/singularity-gifgen/</link>
      <pubDate>Tue, 14 Jan 2020 08:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/singularity-gifgen/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NY_EOhHRTdo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;./sabina.gif&#34; alt=&#34;Joaquin Sabina&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lukechilds/gifgen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gifgen&lt;/a&gt; provides simple high quality GIF encoding.&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;p&gt;You can find the recipe to build the container &lt;a href=&#34;https://github.com/icaoberg/singularity-gifgen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;building-the-image-locally&#34;&gt;Building the image locally&lt;/h3&gt;
&lt;p&gt;The script &lt;code&gt;build.sh&lt;/code&gt; looks like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

IMAGE=singularity-gifgen.simg
DEFINITION=Singularity

if [ -f $IMAGE ]; then
	rm -fv $IMAGE
fi

sudo singularity build $IMAGE $DEFINITION
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To build the image locally simply run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash ./build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;building-the-image-remotely&#34;&gt;Building the image remotely&lt;/h3&gt;
&lt;p&gt;The script &lt;code&gt;rbuild.sh&lt;/code&gt; looks like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

IMAGE=singularity-gifgen.simg
DEFINITION=Singularity

if [ -f $IMAGE ]; then
	rm -fv $IMAGE
fi

singularity build --remote $IMAGE $DEFINITION
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you notice, there isn&amp;rsquo;t much difference between this script and the previous script.&lt;/p&gt;
&lt;p&gt;To build the image remotely simply run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash ./rbuild.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;running-gifgen&#34;&gt;Running gifgen&lt;/h2&gt;
&lt;p&gt;To run the app in the container, simply run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;singularity exec singularity-gifgen.simg gifgen
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Singularity and Travis config</title>
      <link>http://icaoberg.github.io/post/singularity-travis-config/</link>
      <pubDate>Tue, 07 Jan 2020 16:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/singularity-travis-config/</guid>
      <description>&lt;p&gt;If you read my previous post, I updated a repository I built a while ago with a Singularity recipe for gotop. The main reason for the post was to show how easy it is to build a simple small container both locally and remotely.&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/XR9Dp54ZC4dji&#34; width=&#34;480&#34; height=&#34;288&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;&lt;/iframe&gt;&lt;br&gt;**Figure 1**. Surprised, it works pretty easily.
&lt;p&gt;However because my original repository was built a while ago, I built my original container on Singularity v2.6.0 while the latest is Singularity v3.5.2. Hence, I needed to update my scripts. And you know, it wasn&amp;rsquo;t that difficult and it worked.&lt;/p&gt;
&lt;p&gt;But then&amp;hellip;. Travis.&lt;/p&gt;
&lt;h2 id=&#34;travis-my-old-enemy&#34;&gt;Travis, my old enemy&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./logo.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Travis CI is a hosted continuous integration service used to build and test software projects hosted at GitHub.&amp;rdquo; [&lt;a href=&#34;https://en.wikipedia.org/wiki/Travis_CI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wikipedia&lt;/a&gt;]. It was comforting to find Singularity Hub has a template I could reuse. To see their repo click &lt;a href=&#34;https://github.com/singularityhub/travis-ci&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hence, I needed to update my Travis config file as well. It wasn&amp;rsquo;t easy. Installing the newer version of Singularity was a little more convoluted than the older versions (though not that much). Now, the Travis config for &lt;a href=&#34;https://github.com/icaoberg/singularity-gotop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gotop&lt;/a&gt; looks like this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;os: linux

# whitelist
branches:
  only:
    - master

language: go

go:
    - &amp;quot;1.13&amp;quot;

python:
    - &amp;quot;3.7&amp;quot;

addons:
  apt:
    packages:
      - flawfinder
      - squashfs-tools
      - uuid-dev
      - libuuid1
      - libffi-dev
      - libssl-dev
      - libssl1.0.0
      - libarchive-dev
      - libgpgme11-dev
      - libseccomp-dev
  homebrew:
    packages:
      - squashfs
    update: true

sudo: required
#dist: trusty

matrix:
  include:
    - python: &amp;quot;2.6&amp;quot;
    - python: &amp;quot;3.5&amp;quot;

before_install:
  - sudo chmod u+x .travis/*.sh
  - /bin/bash .travis/setup.sh

install:
  - # override

script:
  - bash ./build.sh
  - du -h singularity-gotop.simg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the &lt;code&gt;./.travis/setup.sh&lt;/code&gt; is just as straight-forward&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash -ex

sudo sed -i -e &#39;s/^Defaults\tsecure_path.*$//&#39; /etc/sudoers

pip install --user sregistry[all]

# Install Singularity
SINGULARITY_BASE=&amp;quot;${GOPATH}/src/github.com/sylabs/singularity&amp;quot;
export PATH=&amp;quot;${GOPATH}/bin:${PATH}&amp;quot;

mkdir -p &amp;quot;${GOPATH}/src/github.com/sylabs&amp;quot;
cd &amp;quot;${GOPATH}/src/github.com/sylabs&amp;quot;

git clone https://github.com/sylabs/singularity
git checkout tags/v3.5.2
cd singularity
./mconfig -v -p /usr/local
make -j `nproc 2&amp;gt;/dev/null || echo 1` -C ./builddir all
sudo make -C ./builddir install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The script above is a cleaned up version of the script suggested by the Singularity Hub repo. &lt;a href=&#34;https://travis-ci.org/icaoberg/singularity-gotop/builds/633977539&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;It works!&lt;/a&gt; So I am a happy camper.&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/pGOLBwYBTEvsI&#34; width=&#34;480&#34; height=&#34;357&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;&lt;/iframe&gt;&lt;br&gt;**Figure 2**. I am a happy camper.
</description>
    </item>
    
    <item>
      <title>gotop</title>
      <link>http://icaoberg.github.io/post/singularity-gotop/</link>
      <pubDate>Tue, 07 Jan 2020 08:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/singularity-gotop/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;./logo.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cjbassi/gotop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gotop&lt;/a&gt; is a very useful app that I use all the time in our department cluster. Even though I have root privileges in our HPC cluster, I&amp;rsquo;d rather do my computing as a regular user. It keeps me in check and forces me to think like a power/regular user.&lt;/p&gt;
&lt;p&gt;Hence, I use &lt;a href=&#34;https://github.com/cjbassi/gotop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gotop&lt;/a&gt; in a Singularity container.&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;p&gt;You can find the recipe to build the container &lt;a href=&#34;https://github.com/icaoberg/singularity-gotop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To facilitate building the container, you will find two &lt;strong&gt;simple&lt;/strong&gt; scripts in the repository&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rbuild.sh&lt;/code&gt;. Builds the image remotely and then pulls it down locally. You will need access to &lt;a href=&#34;https://cloud.sylabs.io/builder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SyLabs.io Remote Builder&lt;/a&gt; to do this. Getting access to the Remote Builder is beyond the scope of this post.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build.sh&lt;/code&gt;. Builds the image locally. You will need root privileges to build the container locally.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;building-the-image-locally&#34;&gt;Building the image locally&lt;/h3&gt;
&lt;p&gt;The script &lt;code&gt;build.sh&lt;/code&gt; looks like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

IMAGE=singularity-gotop.simg
DEFINITION=Singularity

if [ -f $IMAGE ]; then
	rm -fv $IMAGE
fi

sudo singularity build $IMAGE $DEFINITION
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To build the image locally simply run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash ./build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output should look similar to&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/292285&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/292285.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;building-the-image-remotely&#34;&gt;Building the image remotely&lt;/h3&gt;
&lt;p&gt;The script &lt;code&gt;rbuild.sh&lt;/code&gt; looks like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

IMAGE=singularity-gotop.simg
DEFINITION=Singularity

if [ -f $IMAGE ]; then
	rm -fv $IMAGE
fi

singularity build --remote $IMAGE $DEFINITION
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you notice, there isn&amp;rsquo;t much difference between this script and the previous script.&lt;/p&gt;
&lt;p&gt;To build the image remotely simply run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash ./rbuild.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output should look similar to&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/cttCPrVN082jOCFdAUyOi0RsB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/cttCPrVN082jOCFdAUyOi0RsB.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A note on building remotely. Because my script is simple and straightforward, there are no annotations associated with this build. If you were to take a look at my profile in &lt;a href=&#34;https://cloud.sylabs.io/library/icaoberg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SyLabs.io&lt;/a&gt; you will notice there is a new project associated with the remote build&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is a footprint, evidence the image was built remotely. Also notice the download number is 1. This is because running the remote commands builds the container then downloads it locally.&lt;/p&gt;
&lt;h2 id=&#34;running-gotop&#34;&gt;Running gotop&lt;/h2&gt;
&lt;p&gt;To run the app in the container, simply run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;singularity exec singularity-gotop.simg gotop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output should look similar to&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/292294&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/292294.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Singularity Desktop MacOSX (Beta Release)</title>
      <link>http://icaoberg.github.io/post/singularity-macosx-journey-1/</link>
      <pubDate>Tue, 07 Jan 2020 08:00:00 +0000</pubDate>
      <guid>http://icaoberg.github.io/post/singularity-macosx-journey-1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: My first journey went better than expected. However the purpose of this post is to document the issues I experienced in order to, hopefully, find a solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Matlab Onramp</title>
      <link>http://icaoberg.github.io/post/matlab-onramp/</link>
      <pubDate>Sat, 09 Nov 2019 01:48:55 -0500</pubDate>
      <guid>http://icaoberg.github.io/post/matlab-onramp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Find Files</title>
      <link>http://icaoberg.github.io/post/matlab-find-files/</link>
      <pubDate>Tue, 22 Oct 2019 16:11:26 -0400</pubDate>
      <guid>http://icaoberg.github.io/post/matlab-find-files/</guid>
      <description>&lt;p&gt;I have been using Matlab for so long that I need to update some of my code. Some of the features aren&amp;rsquo;t that new but are certainly more efficient. Loving this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mathworks.com/matlabcentral/answers/32038-can-you-use-dir-to-list-files-in-subfolders&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Useful link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Programming for Lovers</title>
      <link>http://icaoberg.github.io/post/programming-for-lovers/</link>
      <pubDate>Mon, 14 Oct 2019 15:57:35 -0400</pubDate>
      <guid>http://icaoberg.github.io/post/programming-for-lovers/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;For anyone who wants to follow along to lecture 0 of &lt;a href=&#34;https://twitter.com/hashtag/ProgrammingForLovers?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ProgrammingForLovers&lt;/a&gt; this evening at 8 ET, the public YouTube Live link is at &lt;a href=&#34;https://t.co/wPefWSSnCB&#34;&gt;https://t.co/wPefWSSnCB&lt;/a&gt;&lt;/p&gt;&amp;mdash; Phillip Compeau (@PhillipCompeau) &lt;a href=&#34;https://twitter.com/PhillipCompeau/status/1183859120283279371?ref_src=twsrc%5Etfw&#34;&gt;October 14, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Today at 8:00p.m., the first Lecture of &lt;strong&gt;Programming for Lovers&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>browsh</title>
      <link>http://icaoberg.github.io/post/singularity-browsh/</link>
      <pubDate>Sun, 13 Oct 2019 01:19:33 -0400</pubDate>
      <guid>http://icaoberg.github.io/post/singularity-browsh/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Just created and pushed an image to &lt;a href=&#34;https://twitter.com/SylabsIO?ref_src=twsrc%5Etfw&#34;&gt;@SylabsIO&lt;/a&gt; cloud for &lt;a href=&#34;https://twitter.com/brow_sh?ref_src=twsrc%5Etfw&#34;&gt;@brow_sh&lt;/a&gt;, an amazing fully-modern text-based browser developed by &lt;a href=&#34;https://twitter.com/twombh?ref_src=twsrc%5Etfw&#34;&gt;@twombh&lt;/a&gt; &lt;a href=&#34;https://t.co/0FxdxDqO8U&#34;&gt;pic.twitter.com/0FxdxDqO8U&lt;/a&gt;&lt;/p&gt;&amp;mdash; IvÃ¡n (@justahappygeek) &lt;a href=&#34;https://twitter.com/justahappygeek/status/1183250309612789765?ref_src=twsrc%5Etfw&#34;&gt;October 13, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Here is the deal, I have been using &lt;a href=&#34;http://lynx.browser.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lynx&lt;/a&gt; since forever. Just because. However today I found about &lt;a href=&#34;https://www.brow.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;browsh&lt;/a&gt;. What a joyous moment!&lt;/p&gt;
&lt;p&gt;Finally a browser I would feel happy running on the HPC cluster. As always, I think Singularity is the best way to deploy tools like this for larger machines (especially if you are a user without root privileges).&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/icaoberg/singularity-browsh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub source code repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.sylabs.io/library/icaoberg/default/browsh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SyLabs.io Cloud image repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cody</title>
      <link>http://icaoberg.github.io/post/cody/</link>
      <pubDate>Thu, 26 Sep 2019 02:10:48 -0400</pubDate>
      <guid>http://icaoberg.github.io/post/cody/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.mathworks.com/matlabcentral/cody/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mathworks Cody&lt;/a&gt; is a platform for having fun with Matlab. I mean I am having fun. I think it is similar to LeetCode or HackerRank. Main difference is, it is meant for Matlab.&lt;/p&gt;
&lt;p&gt;Some of these exercises are simple -so far-. I like these kind of sites because it keep my old brain active.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CellOrganizer for Singularity</title>
      <link>http://icaoberg.github.io/post/singularity-retweet-ceo/</link>
      <pubDate>Sat, 21 Sep 2019 00:20:50 -0400</pubDate>
      <guid>http://icaoberg.github.io/post/singularity-retweet-ceo/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Spanish II at carnegielibrary is geared toward those already have a basic understanding of Spanish. Join us! &lt;a href=&#34;https://t.co/KL5KfvbRvk&#34;&gt;pic.twitter.com/KL5KfvbRvk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Barrio Latino (@BarrioWRCT883) &lt;a href=&#34;https://twitter.com/BarrioWRCT883/status/1170336228593586177?ref_src=twsrc%5Etfw&#34;&gt;September 7, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;P.S. I got retweeted by the official Singularity account on Twitter as well as their CEO. What a time to be alive.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker - Matlab MCR 2019b</title>
      <link>http://icaoberg.github.io/post/docker-matlabmcr2019b/</link>
      <pubDate>Fri, 20 Sep 2019 21:17:12 -0400</pubDate>
      <guid>http://icaoberg.github.io/post/docker-matlabmcr2019b/</guid>
      <description>&lt;div class=&#34;github-card&#34; data-github=&#34;icaoberg/docker-matlabmcr2019b&#34; data-width=&#34;400&#34; data-height=&#34;153&#34; data-theme=&#34;default&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;//cdn.jsdelivr.net/github-cards/latest/widget.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Mathworks release version 2019b a few days ago. Alas, here are the links to the Docker and Singularity images. I hope there is someone out there that find these useful.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/icaoberg/docker-matlabmcr2019b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dockerfile on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.docker.com/u/icaoberg/repository/docker/icaoberg/matlabmcr2019b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker image on DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/icaoberg/singularity-matlabmcr2019b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Singularity recipe on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.sylabs.io/library/icaoberg/default/matlabmcr2019b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Singularity image on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Bio-Formats command line tools to validate OME-TIFF images</title>
      <link>http://icaoberg.github.io/post/bioformats-cli-ome-tiff-images/</link>
      <pubDate>Sat, 10 Dec 2016 13:46:38 -0500</pubDate>
      <guid>http://icaoberg.github.io/post/bioformats-cli-ome-tiff-images/</guid>
      <description>&lt;p&gt;We have added new functionality to CellOrganizer, including the possibility to save synthetic images as OME-TIFF. The header in an OME-TIFF file is an XML snippet that follows the OME data model.We have added new functionality to CellOrganizer, including the possibility to save synthetic images as OME-TIFF. The header in an OME-TIFF file is an XML snippet that follows the &lt;a href=&#34;http://www.openmicroscopy.org/site/support/ome-model/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OME data model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To generate OME-TIFF files in CellOrganizer, make sure that the correct output flag is set to true&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;options.output.OMETIFF = true;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;demo3d34&#34;&gt;demo3D34&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./screenshot1.jpg&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt;
&lt;p&gt;In CellOrganizer, demo3D34 synthesizes an image and saves it as an OME-TIFF.&lt;/p&gt;
&lt;p&gt;To validate the OME.tiff we use &lt;a href=&#34;http://www.openmicroscopy.org/site/support/bio-formats5.2/users/comlinetools/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bioformats command line tools&lt;/a&gt;, especifically&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xmlvalid&lt;/strong&gt;. A command-line XML validation tool, useful for checking an OME-XML document for compliance with the OME-XML schema.
This tool will validate the XML snippet in the header against the OME data model schema. The XML header attached to this example is&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tool will validate the XML snippet in the header against the OME data model schema. The XML header attached to this example is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&amp;lt;!-- Warning: this comment is an OME-XML metadata block, which contains crucial dimensional parameters and other important metadata. Please edit cautiously (if at all), and back up the original data before doing so. For more information, see the OME-TIFF web site: http://www.openmicroscopy.org/site/support/ome-model/ome-tiff/. --&amp;gt;&amp;lt;OME xmlns=&amp;quot;http://www.openmicroscopy.org/Schemas/OME/2016-06&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; Creator=&amp;quot;OME Bio-Formats 5.2.4&amp;quot; UUID=&amp;quot;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;quot; xsi:schemaLocation=&amp;quot;http://www.openmicroscopy.org/Schemas/OME/2016-06 http://www.openmicroscopy.org/Schemas/OME/2016-06/ome.xsd&amp;quot;&amp;gt;&amp;lt;Image ID=&amp;quot;Image:0&amp;quot;&amp;gt;&amp;lt;Pixels BigEndian=&amp;quot;true&amp;quot; DimensionOrder=&amp;quot;XYZCT&amp;quot; ID=&amp;quot;Pixels:0&amp;quot; PhysicalSizeX=&amp;quot;0.049&amp;quot; PhysicalSizeXUnit=&amp;quot;Âµm&amp;quot; PhysicalSizeY=&amp;quot;0.049&amp;quot; PhysicalSizeYUnit=&amp;quot;Âµm&amp;quot; PhysicalSizeZ=&amp;quot;0.2&amp;quot; PhysicalSizeZUnit=&amp;quot;Âµm&amp;quot; SizeC=&amp;quot;3&amp;quot; SizeT=&amp;quot;1&amp;quot; SizeX=&amp;quot;696&amp;quot; SizeY=&amp;quot;563&amp;quot; SizeZ=&amp;quot;10&amp;quot; Type=&amp;quot;uint8&amp;quot;&amp;gt;&amp;lt;Channel ID=&amp;quot;Channel:0:0&amp;quot; Name=&amp;quot;cell&amp;quot; SamplesPerPixel=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;LightPath/&amp;gt;&amp;lt;/Channel&amp;gt;&amp;lt;Channel ID=&amp;quot;Channel:0:1&amp;quot; Name=&amp;quot;nucleus&amp;quot; SamplesPerPixel=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;LightPath/&amp;gt;&amp;lt;/Channel&amp;gt;&amp;lt;Channel ID=&amp;quot;Channel:0:2&amp;quot; Name=&amp;quot;vesicle1&amp;quot; SamplesPerPixel=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;LightPath/&amp;gt;&amp;lt;/Channel&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;0&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;0&amp;quot; IFD=&amp;quot;0&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;0&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;1&amp;quot; IFD=&amp;quot;1&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;0&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;2&amp;quot; IFD=&amp;quot;2&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;0&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;3&amp;quot; IFD=&amp;quot;3&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;0&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;4&amp;quot; IFD=&amp;quot;4&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;0&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;5&amp;quot; IFD=&amp;quot;5&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;0&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;6&amp;quot; IFD=&amp;quot;6&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;0&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;7&amp;quot; IFD=&amp;quot;7&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;0&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;8&amp;quot; IFD=&amp;quot;8&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;0&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;9&amp;quot; IFD=&amp;quot;9&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;1&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;0&amp;quot; IFD=&amp;quot;10&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;1&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;1&amp;quot; IFD=&amp;quot;11&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;1&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;2&amp;quot; IFD=&amp;quot;12&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;1&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;3&amp;quot; IFD=&amp;quot;13&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;1&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;4&amp;quot; IFD=&amp;quot;14&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;1&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;5&amp;quot; IFD=&amp;quot;15&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;1&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;6&amp;quot; IFD=&amp;quot;16&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;1&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;7&amp;quot; IFD=&amp;quot;17&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;1&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;8&amp;quot; IFD=&amp;quot;18&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;1&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;9&amp;quot; IFD=&amp;quot;19&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;2&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;0&amp;quot; IFD=&amp;quot;20&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;2&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;1&amp;quot; IFD=&amp;quot;21&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;2&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;2&amp;quot; IFD=&amp;quot;22&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;2&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;3&amp;quot; IFD=&amp;quot;23&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;2&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;4&amp;quot; IFD=&amp;quot;24&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;2&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;5&amp;quot; IFD=&amp;quot;25&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;2&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;6&amp;quot; IFD=&amp;quot;26&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;2&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;7&amp;quot; IFD=&amp;quot;27&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;2&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;8&amp;quot; IFD=&amp;quot;28&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;TiffData FirstC=&amp;quot;2&amp;quot; FirstT=&amp;quot;0&amp;quot; FirstZ=&amp;quot;9&amp;quot; IFD=&amp;quot;29&amp;quot; PlaneCount=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;UUID FileName=&amp;quot;cell1.ome.tif&amp;quot;&amp;gt;urn:uuid:49279097-4296-40f5-920b-aa60b3c3850c&amp;lt;/UUID&amp;gt;&amp;lt;/TiffData&amp;gt;&amp;lt;/Pixels&amp;gt;&amp;lt;/Image&amp;gt;&amp;lt;/OME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running xmlvalid against the OME-TIFF file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./xmlvalid cell1.ome.tif
Parsing schema path
http://www.openmicroscopy.org/Schemas/OME/2016-06/ome.xsd
Validating cell1.ome.tif
No validation errors found.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Installing R v3.2.3</title>
      <link>http://icaoberg.github.io/post/installing-r-3.2.3/</link>
      <pubDate>Tue, 12 Apr 2016 05:34:42 -0500</pubDate>
      <guid>http://icaoberg.github.io/post/installing-r-3.2.3/</guid>
      <description>&lt;p&gt;If you want to install R 3.2.3 in your home directory in the CBD cluster, then you can use the following script.&lt;/p&gt;
&lt;p&gt;Feel free to modify it as needed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

## Ivan E. Cao-Berg (icaoberg@scs.cmu.edu)
## Copyright (C) 2016
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published
## by the Free Software Foundation; either version 2 of the License,
## or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
## 02110-1301, USA.

if [ ! -d ~/bin ]; then
	mkdir ~/bin
fi
cd ~/bin

wget -nc https://cran.rstudio.com/src/base/R-3/R-3.2.3.tar.gz
tar -xvf R-3.2.3.tar.gz
cd R-3.2.3
./configure
make

ln -s ~/bin/R-3.2.3/bin/R ~/bin/R
ln -s ~/bin/R-3.2.3/bin/Rcmd ~/bin/Rcmd
ln -s ~/bin/R-3.2.3/bin/Rd2pdf ~/bin/Rd2pdf
ln -s ~/bin/R-3.2.3/bin/Rprof ~/bin/Rprof
ln -s ~/bin/R-3.2.3/bin/Rscript ~/bin/Rscript
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can run these commands in terminal to get the script and submit to the scheduler&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://gist.github.com/d3e4812911a691d4deff.git
cd d3e4812911a691d4deff
sbatch -p pool1 -o ./install_R.3.2.3.out ./script.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the installation was successful, then you should be able to run R&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[icaoberg ~]$ ~/bin/R

R version 3.2.3 (2015-12-10) -- &amp;quot;Wooden Christmas-Tree&amp;quot;
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type &#39;license()&#39; or &#39;licence()&#39; for distribution details.

Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type &#39;contributors()&#39; for more information and
&#39;citation()&#39; on how to cite R or R packages in publications.

Type &#39;demo()&#39; for some demos, &#39;help()&#39; for on-line help, or
&#39;help.start()&#39; for an HTML browser interface to help.
Type &#39;q()&#39; to quit R.

&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Making an OME.TIFF using Bioformats</title>
      <link>http://icaoberg.github.io/post/making-ometiff-using-demo3d01/</link>
      <pubDate>Wed, 09 Mar 2016 13:46:38 -0500</pubDate>
      <guid>http://icaoberg.github.io/post/making-ometiff-using-demo3d01/</guid>
      <description>&lt;p&gt;In the previous example we used a 2D multitiff to make an OME.tiff.  In this example we are going to use the files generated by demo3D01.&lt;/p&gt;
&lt;p&gt;In this script we are loading each file, one by one, and then we are concatenating them.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;files = { &#39;nucleus.tif&#39;, &#39;cell.tif&#39;, &#39;lysosome.tif&#39;, &#39;endosome.tif&#39;, ...
    &#39;mitochondrion.tif&#39;, &#39;nucleoli.tif&#39; };
addpath( &#39;./bfmatlab&#39; );
omeimg = [];
for c=1:1:numel(files)
    file = files{c};
    img = tif2img( file );
    for z=1:1:size(img,3)
        %remember the indices mean xyzct
        omeimg(:,:,z,c,1) = img(:,:,z);
    end
end
bfsave( omeimg, &#39;demo3D01.ome.tif&#39;, &#39;Compression&#39;, &#39;LZW&#39; );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can probably optimize the snippet. We want to use the compression option to make a smaller file. Using compression you get&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ du -h demo3D01.ome.tif
 14M  demo3D01.ome.tif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without compression&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ du -h demo3D01.ome.tif
423M  demo3D01.ome.tif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like the previous example, then you can import the image to the server&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making an OME.TIFF using Bioformats</title>
      <link>http://icaoberg.github.io/post/making-ometiff-using-demo2d00/</link>
      <pubDate>Tue, 08 Mar 2016 13:46:38 -0500</pubDate>
      <guid>http://icaoberg.github.io/post/making-ometiff-using-demo2d00/</guid>
      <description>&lt;p&gt;For this example I am using the image generated by CellOrganizerâs demo2D00.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; help demo2D00
 demo2D00
 
 Synthesize one 2D image from all object models. Results will be one TIFF file, with six slices, one each for cell boundary, nuclear boundary, nucleoli, mitochondria, lysosomes, and endosomes.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which generate one multitiff file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; setup;
demo2D00()
Checking for new stable version. Version is up to date.
Checking existence of log folder
Making log directory /Users/icaoberg/Desktop/cellorganizer/demos/2D/demo2D00/log
Checking the validity of input files
Parsing SLML instances
Checking existence of temporary folder
Creating temporary folder in: /Users/icaoberg/Desktop/cellorganizer/demos/2D/demo2D00/temp
Setting target directory to: /Users/icaoberg/Desktop/cellorganizer/demos/2D/demo2D00/images
Setting prefix to: demo2D00_
Setting number of synthesized images to: 1
Setting compression to: lzw
Synthesizing image 1. Please wait, this might take several minutes.
Setting model dimensionality to 2D
Checking all models have the same dimensionality
Generating cell shape
Removing temporary files
Closing log file.
Finished synthesis
Elapsed time is 16.146033 seconds.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generated image is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; img = tif2img( &#39;demo2D001.tif&#39; );
&amp;gt;&amp;gt; whos img
  Name        Size                  Bytes  Class     Attributes
  img       778x758x6            28306752  double
&amp;gt;&amp;gt; imshow( reshape( img, size(img,1),[] ) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;demo2D00.jpg&#34; alt=&#34;OMETIFF&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;intro-to-bio-formats&#34;&gt;Intro to Bio-Formats&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;bio-formats-logo-on-white-800.png&#34; alt=&#34;Bio-Formats&#34;&gt;&lt;/p&gt;
&lt;p&gt;The important thing to keep in mind is that the pixel data in an OMERO image is essentially a 5D array, where the information is stored as xyzct.&lt;/p&gt;
&lt;p&gt;Since we are not saving any metadata in the OME.tiff, we can save the pixel data in three steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read the original synthetic image generated from CellOrganizer&lt;/li&gt;
&lt;li&gt;Reshape the pixel data to a 5D array&lt;/li&gt;
&lt;li&gt;Save the pixel data using BioFormats&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reading-and-saving-the-data-as-an-ometiff&#34;&gt;Reading and saving the data as an OME.tiff&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;img = tif2img( &#39;demo2D001.tif&#39; );
addpath( &#39;./bfmatlab&#39; );
omeimg = [];
for i=1:1:size(img,3)
    %remember the indices mean xyzct
    omeimg(:,:,1,i,1) = img(:,:,i);
end
bfsave( omeimg, &#39;demo2D001.ome.tif&#39; );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above snippet generates a valid OME.tiff. You can then use OMERO.importer to import the image to the server
&lt;img src=&#34;screenshot1.png&#34; alt=&#34;screenshot1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once the image has been imported, you should be able to use OMERO.insight to see it
&lt;img src=&#34;screenshot2.png&#34; alt=&#34;screenshot2&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can double click on the image thumbnail to open the full viewer
&lt;img src=&#34;screenshot3.png&#34; alt=&#34;screenshot3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Notice the six colored buttons to the right. Those represent the different channels. At the bottom of the screen you can also notice the string âZ=1/1, T=1/1â. This means we successfully made and imported a single time point 2D image with 6 channels.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GraphViz-like tools for Matlab</title>
      <link>http://icaoberg.github.io/post/graphviz-for-matlab/</link>
      <pubDate>Tue, 16 Feb 2016 05:52:23 -0500</pubDate>
      <guid>http://icaoberg.github.io/post/graphviz-for-matlab/</guid>
      <description>&lt;p&gt;You can use Matlabâs profile function to get some useful information about your scripts.&lt;/p&gt;
&lt;p&gt;For example, running the profiler around CellOrganizerâs demo2D00&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; profile on; 
&amp;gt;&amp;gt; demo2D00(); 
&amp;gt;&amp;gt; profile off; 
&amp;gt;&amp;gt; profview
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will produce a report similar to this one&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./profile.png&#34; alt=&#34;Profile&#34;&gt;&lt;/p&gt;
&lt;p&gt;Report from running a profile on demo2D00.&lt;/p&gt;
&lt;p&gt;But sometimes you want something visual. Andâ¦. here comes &lt;a href=&#34;http://www.mathworks.com/matlabcentral/fileexchange/27608-graphviz-like-tools-for-matlab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphViz-like tools for MATLAB&lt;/a&gt; to the rescue!&lt;/p&gt;
&lt;p&gt;GraphViz-like tools for Matlab â[â¦] creates a GraphViz dot language representation of the dependencies of a function.â&lt;/p&gt;
&lt;p&gt;Using this tool is very straightforward, all you need to do is download the toolkit along with its dependencies; &lt;a href=&#34;http://www.mathworks.com/matlabcentral/fileexchange/17291-fdep--a-pedestrian-function-dependencies-finder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fdep: a pedestrian function dependencies finder&lt;/a&gt; and &lt;a href=&#34;http://www.graphviz.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphViz&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Before we start you need&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mathworks.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Matlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://brew.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I tested the toolkit in Matlab 2014b for Mac.  This shell script will download the toolkit and its two dependencies. Assuming you are using HomeBrew, it is will also install GraphViz&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -nc http://www.mathworks.com/matlabcentral/mlc-downloads/downloads/submissions/27608/versions/2/download/zip/docsgen_dot_tools.zip
unzip -o docsgen_dot_tools.zip
rm -f docsgen_dot_tools.zip
wget -nc http://www.mathworks.com/matlabcentral/mlc-downloads/downloads/submissions/24652/versions/4/download/zip/drawDot.zip
unzip -o drawDot.zip
rm -f drawDot.zip
wget -nc http://www.mathworks.com/matlabcentral/mlc-downloads/downloads/submissions/17291/versions/8/download/zip/fdep_21jun2010.zip
unzip -o fdep_21jun2010.zip
rm -f fdep_21jun2010.zip
brew install graphviz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the above commands were successful, then you should see the following files as well as the dot binary.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls
drawDot.m  hfdep    mGraphViz.m  script.sh  tfdep2.m  tfdep4.m
fdep.m    license.txt  mkdotfile.m  tfdep1.m  tfdep3.m
$ which dot
/usr/local/bin/dot
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;This example makes the graph from a file in my desktop. Make sure the file save in the variable ifile exists before running.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;
ifile = &#39;~/Desktop/script.m&#39;;
if exist( ifile )
  ofile = &#39;graph.dot&#39;;
  txt = mkdotfile( ifile, ofile );
  system( [dot -Tjpg graph.dot -o graph.jpg] );
  exit;&amp;quot; &amp;gt; make_graph.m
end
matlab -nodesktop -nosplash -r &amp;quot;make_dot_graph;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result from running the script above is the graph below&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./featured.jpg&#34; alt=&#34;Graph&#34;&gt;&lt;/p&gt;
&lt;p&gt;Result from running GraphViz-like tools for MATLAB on CellOrganizerâs demo2D00.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
