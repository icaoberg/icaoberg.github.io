<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bioformats | icaoberg AT github DOT io</title>
    <link>http://icaoberg.github.io/tags/bioformats/</link>
      <atom:link href="http://icaoberg.github.io/tags/bioformats/index.xml" rel="self" type="application/rss+xml" />
    <description>bioformats</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright © 2006-2020 icaoberg AT github DOT io</copyright><lastBuildDate>Wed, 09 Mar 2016 13:46:38 -0500</lastBuildDate>
    <image>
      <url>http://icaoberg.github.io/img/icon-192.png</url>
      <title>bioformats</title>
      <link>http://icaoberg.github.io/tags/bioformats/</link>
    </image>
    
    <item>
      <title>Making an OME.TIFF using Bioformats</title>
      <link>http://icaoberg.github.io/post/making-ometiff-using-demo3d01/</link>
      <pubDate>Wed, 09 Mar 2016 13:46:38 -0500</pubDate>
      <guid>http://icaoberg.github.io/post/making-ometiff-using-demo3d01/</guid>
      <description>&lt;p&gt;In the previous example we used a 2D multitiff to make an OME.tiff.  In this example we are going to use the files generated by demo3D01.&lt;/p&gt;

&lt;p&gt;In this script we are loading each file, one by one, and then we are concatenating them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;files = { &#39;nucleus.tif&#39;, &#39;cell.tif&#39;, &#39;lysosome.tif&#39;, &#39;endosome.tif&#39;, ...
    &#39;mitochondrion.tif&#39;, &#39;nucleoli.tif&#39; };
addpath( &#39;./bfmatlab&#39; );
omeimg = [];
for c=1:1:numel(files)
    file = files{c};
    img = tif2img( file );
    for z=1:1:size(img,3)
        %remember the indices mean xyzct
        omeimg(:,:,z,c,1) = img(:,:,z);
    end
end
bfsave( omeimg, &#39;demo3D01.ome.tif&#39;, &#39;Compression&#39;, &#39;LZW&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can probably optimize the snippet. We want to use the compression option to make a smaller file. Using compression you get&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ du -h demo3D01.ome.tif
 14M  demo3D01.ome.tif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without compression&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ du -h demo3D01.ome.tif
423M  demo3D01.ome.tif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like the previous example, then you can import the image to the server&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./screenshot.png&#34; alt=&#34;Screenshot&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making an OME.TIFF using Bioformats</title>
      <link>http://icaoberg.github.io/post/making-ometiff-using-demo2d00/</link>
      <pubDate>Tue, 08 Mar 2016 13:46:38 -0500</pubDate>
      <guid>http://icaoberg.github.io/post/making-ometiff-using-demo2d00/</guid>
      <description>

&lt;p&gt;For this example I am using the image generated by CellOrganizer’s demo2D00.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; help demo2D00
 demo2D00
 
 Synthesize one 2D image from all object models. Results will be one TIFF file, with six slices, one each for cell boundary, nuclear boundary, nucleoli, mitochondria, lysosomes, and endosomes.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which generate one multitiff file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; setup;
demo2D00()
Checking for new stable version. Version is up to date.
Checking existence of log folder
Making log directory /Users/icaoberg/Desktop/cellorganizer/demos/2D/demo2D00/log
Checking the validity of input files
Parsing SLML instances
Checking existence of temporary folder
Creating temporary folder in: /Users/icaoberg/Desktop/cellorganizer/demos/2D/demo2D00/temp
Setting target directory to: /Users/icaoberg/Desktop/cellorganizer/demos/2D/demo2D00/images
Setting prefix to: demo2D00_
Setting number of synthesized images to: 1
Setting compression to: lzw
Synthesizing image 1. Please wait, this might take several minutes.
Setting model dimensionality to 2D
Checking all models have the same dimensionality
Generating cell shape
Removing temporary files
Closing log file.
Finished synthesis
Elapsed time is 16.146033 seconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generated image is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; img = tif2img( &#39;demo2D001.tif&#39; );
&amp;gt;&amp;gt; whos img
  Name        Size                  Bytes  Class     Attributes
  img       778x758x6            28306752  double
&amp;gt;&amp;gt; imshow( reshape( img, size(img,1),[] ) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;demo2D00.jpg&#34; alt=&#34;OMETIFF&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;intro-to-bio-formats&#34;&gt;Intro to Bio-Formats&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;bio-formats-logo-on-white-800.png&#34; alt=&#34;Bio-Formats&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The important thing to keep in mind is that the pixel data in an OMERO image is essentially a 5D array, where the information is stored as xyzct.&lt;/p&gt;

&lt;p&gt;Since we are not saving any metadata in the OME.tiff, we can save the pixel data in three steps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read the original synthetic image generated from CellOrganizer&lt;/li&gt;
&lt;li&gt;Reshape the pixel data to a 5D array&lt;/li&gt;
&lt;li&gt;Save the pixel data using BioFormats&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;reading-and-saving-the-data-as-an-ome-tiff&#34;&gt;Reading and saving the data as an OME.tiff&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;img = tif2img( &#39;demo2D001.tif&#39; );
addpath( &#39;./bfmatlab&#39; );
omeimg = [];
for i=1:1:size(img,3)
    %remember the indices mean xyzct
    omeimg(:,:,1,i,1) = img(:,:,i);
end
bfsave( omeimg, &#39;demo2D001.ome.tif&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above snippet generates a valid OME.tiff. You can then use OMERO.importer to import the image to the server
&lt;img src=&#34;screenshot1.png&#34; alt=&#34;screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once the image has been imported, you should be able to use OMERO.insight to see it
&lt;img src=&#34;screenshot2.png&#34; alt=&#34;screenshot2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can double click on the image thumbnail to open the full viewer
&lt;img src=&#34;screenshot3.png&#34; alt=&#34;screenshot3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice the six colored buttons to the right. Those represent the different channels. At the bottom of the screen you can also notice the string “Z=&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;, T=1/1”. This means we successfully made and imported a single time point 2D image with 6 channels.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
